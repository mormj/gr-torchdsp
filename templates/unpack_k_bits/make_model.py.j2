from torch import nn
import torch

OP_SIZE = {{items_per_batch}}
NUM_BITS = {{num_bits}}

class UnpackKBits(nn.Module):
    def __init__(self):
        super(UnpackKBits, self).__init__()

    def forward(self, inp ):

        result = torch.zeros(inp.shape[0], inp.shape[1], inp.shape[2]*2, dtype=torch.int8)
        for kk in range(NUM_BITS):
            result[:,:,kk::2] = torch.bitwise_right_shift(torch.bitwise_and(inp, 1 << (NUM_BITS-1-kk)), kk)

        return result


x = torch.randint(4, (1, 1, OP_SIZE), requires_grad=False,
                dtype=torch.int8)


model = UnpackKBits()
model.eval()

print(x.shape, model(x).shape, model(x).dtype )

scripted = torch.jit.trace(model, [x])
scripted.save("1/model.pt")
