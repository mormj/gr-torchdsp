id: torchdsp_triton_unpack_k_bits
label: Triton Unpack K Bits
category: '[torchdsp]'

parameters:
- id: triton_url
  label: "Triton URL"
  dtype: string
  default: "localhost:8000"
- id: device
  label: "Device"
  dtype: enum
  options: [cpu, gpu]
  default: 'cpu'
- id: max_batch_size
  label: "Max Batch Size"
  dtype: int
  default: 256
- id: items_per_batch
  label: "Items Per Batch"
  dtype: int
  default: 1024
- id: model_directory
  label: "Model Directory"
  dtype: string
  default: /tmp/rendered_triton_models
- id: num_bits
  label: "Num Bits"
  dtype: int
  default: 2

inputs:
- label: in
  domain: stream
  dtype: byte

outputs:
- label: out
  domain: stream
  dtype: byte
  vlen: ${num_bits}

templates:
  imports: |- 
    import torchdsp
  make: |-
    <%
      import secrets
      import os
      tmp_modelname = secrets.token_hex(16)
      tmp_modelname_path = "\'" + os.path.join(model_directory, tmp_modelname).replace("'", "") + "\'"
    %>\
    None
    context = { "max_batch_size": ${max_batch_size}, "items_per_batch": ${items_per_batch}, "num_bits": ${num_bits}, "device": "${device}"}
    torchdsp.DynamicModels.render_model('unpack_k_bits', ${tmp_modelname_path}, context, ${triton_url})
    self.${id} = torchdsp.triton_block("${tmp_modelname}", ${max_batch_size}, ${triton_url}, [1], [${num_bits}])

file_format: 1
